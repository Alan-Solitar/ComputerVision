1. design a stack with O(1) lookup for minimum element in the stack. Optimize your design write code for push, pop.

2.Why is it better to have database management systems rather than just text files?

3. Design an adress book which can be used to
a) Get the the info of a person from the name
b) Get the info of a person from a number
*numbers are unique, names are not
(most optimal design: use hash tables with key as the the name or number and value as a pointer to the location of info with binary trees to handle collisions)

#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
using namespace std;

GetMaxSum(vector<int> arr){
    //compute max non-continguous sum which is just some of only positive elements
    int sumContig = 0, sumNonContig = 0;
    for(auto &i:arr){
        if(i > 0)
            sumNonContig+=i;
    }
    
    
    
    cout << sumNonContig << " "<<sumContig<<endl;
    
}

GetMaxContigSum(vector<int> arr, size_t start, size_t end) {
    size_t midpoint = (start + end)/2 +1;
    int suml = GetMaxContigSum(arr, start, midpoint);
    int sumr = GetMaxContigSum(arr,midpoint+1,end);
    
    
}
int main() {
    vector<int> arr;
    int t,n;
    cin >>t;
    int num;
    for(int j=0;j<t;j++) {
        cin>>n;
        if(n!=0){
            
            for(int i=0;i<arr;i++) {
                cin >> num;
                arr.push_back(num);
            }
            GetMaxSum(arr);
        }
    }
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */   
    return 0;
}

1-> win
2-> win
3-> win
4->lose
5->win
6->win
7->win
8->
